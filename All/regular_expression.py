# -*- coding:utf-8 -*-
# ---------------------正则表达式------------------------
# 精确匹配
    # \d 匹配一个数字
    # \w 匹配一个字母或数字
    # .  匹配任意字符
    # \s 匹配一个空格

# 匹配变长的字符
    # *     表示任意个字符
    # +     表示至少一个字符
    # ?     表示0个或1个字符
    # {n}   表示n个字符
    # {n,m} 表示n-m个字符

# 例 \d{3}\s+\d{3,8}
    # 1. \d{3}表示匹配3个数字，例如'010'；
    # 2. \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
    # 3. \d{3,8}表示3-8个数字，例如'1234567'。
    # 综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。

    # 匹配'010-12345'
    # 由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。


# 要做更精确地匹配，可以用[]表示范围
    # [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
    # [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
    # [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
    # [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
    #
    # A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
    # ^表示行的开头，^\d表示必须以数字开头。
    # $表示行的结束，\d$表示必须以数字结束。
    # py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。


# -------------------------re模块--------------------------------
# re模块，包含所有正则表达式的功能
import re
# 由于Python的字符串本身也用\转义，所以要特别注意：
s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'

# 使用Python的r前缀,就不用考虑转义的问题了：
s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'


# 判断正则表达式是否匹配
# match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')


# ---------------------------切分字符串------------------------------
# 正常的切分代码：
'a b   c'.split(' ')
# ['a', 'b', '', '', 'c']   无法识别连续的空格

# 用正则表达式切分:
re.split(r'\s+', 'a b   c')
['a', 'b', 'c']

# 无论多少个空格都可以正常分割。加入,试试：
re.split(r'[\s\,]+', 'a,b, c  d')
# ['a', 'b', 'c', 'd']

# 再加入;试试：
re.split(r'[\s\,\;]+', 'a,b;; c  d')
# ['a', 'b', 'c', 'd']


# ------------------------------分组------------------------------------
# 提取子串，用()表示的就是要提取的分组（Group）

# ^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')

m.group(0)  # group(0)永远是原始字符串
# '010-12345'
m.group(1)  # group(1)表示第1个子串
# '010'
m.group(2)  # group(2)表示第2个子串
# '12345'

t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
m.groups()
# ('19', '05', '30')
# 这个正则表达式可以直接识别合法的时间


# -----------------------------------贪婪匹配------------------------------
# 正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。

# 匹配出数字后面的0：
re.match(r'^(\d+)(0*)$', '102300').groups()
# ('102300', '')   由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
re.match(r'^(\d+?)(0*)$', '102300').groups()
# ('1023', '00')


# -----------------------------编译----------------------------------
# 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
# 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
# 用编译后的正则表达式去匹配字符串。

# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
# import re
# 编译:
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
re_telephone.match('010-12345').groups()
# ('010', '12345')
re_telephone.match('010-8086').groups()
# ('010', '8086')